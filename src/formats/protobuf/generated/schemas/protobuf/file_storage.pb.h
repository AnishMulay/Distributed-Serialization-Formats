// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: schemas/protobuf/file_storage.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_schemas_2fprotobuf_2ffile_5fstorage_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_schemas_2fprotobuf_2ffile_5fstorage_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021012 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_schemas_2fprotobuf_2ffile_5fstorage_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_schemas_2fprotobuf_2ffile_5fstorage_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_schemas_2fprotobuf_2ffile_5fstorage_2eproto;
namespace benchmark {
namespace proto {
class FileBlockProto;
struct FileBlockProtoDefaultTypeInternal;
extern FileBlockProtoDefaultTypeInternal _FileBlockProto_default_instance_;
class FileMetadataProto;
struct FileMetadataProtoDefaultTypeInternal;
extern FileMetadataProtoDefaultTypeInternal _FileMetadataProto_default_instance_;
}  // namespace proto
}  // namespace benchmark
PROTOBUF_NAMESPACE_OPEN
template<> ::benchmark::proto::FileBlockProto* Arena::CreateMaybeMessage<::benchmark::proto::FileBlockProto>(Arena*);
template<> ::benchmark::proto::FileMetadataProto* Arena::CreateMaybeMessage<::benchmark::proto::FileMetadataProto>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace benchmark {
namespace proto {

// ===================================================================

class FileMetadataProto final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:benchmark.proto.FileMetadataProto) */ {
 public:
  inline FileMetadataProto() : FileMetadataProto(nullptr) {}
  ~FileMetadataProto() override;
  explicit PROTOBUF_CONSTEXPR FileMetadataProto(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  FileMetadataProto(const FileMetadataProto& from);
  FileMetadataProto(FileMetadataProto&& from) noexcept
    : FileMetadataProto() {
    *this = ::std::move(from);
  }

  inline FileMetadataProto& operator=(const FileMetadataProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline FileMetadataProto& operator=(FileMetadataProto&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const FileMetadataProto& default_instance() {
    return *internal_default_instance();
  }
  static inline const FileMetadataProto* internal_default_instance() {
    return reinterpret_cast<const FileMetadataProto*>(
               &_FileMetadataProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(FileMetadataProto& a, FileMetadataProto& b) {
    a.Swap(&b);
  }
  inline void Swap(FileMetadataProto* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FileMetadataProto* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  FileMetadataProto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<FileMetadataProto>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const FileMetadataProto& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const FileMetadataProto& from) {
    FileMetadataProto::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FileMetadataProto* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "benchmark.proto.FileMetadataProto";
  }
  protected:
  explicit FileMetadataProto(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTagsFieldNumber = 6,
    kNameFieldNumber = 1,
    kPathFieldNumber = 2,
    kOwnerFieldNumber = 8,
    kGroupFieldNumber = 9,
    kSizeFieldNumber = 3,
    kCreatedAtFieldNumber = 4,
    kLastModifiedFieldNumber = 5,
    kPermissionsFieldNumber = 7,
  };
  // repeated string tags = 6;
  int tags_size() const;
  private:
  int _internal_tags_size() const;
  public:
  void clear_tags();
  const std::string& tags(int index) const;
  std::string* mutable_tags(int index);
  void set_tags(int index, const std::string& value);
  void set_tags(int index, std::string&& value);
  void set_tags(int index, const char* value);
  void set_tags(int index, const char* value, size_t size);
  std::string* add_tags();
  void add_tags(const std::string& value);
  void add_tags(std::string&& value);
  void add_tags(const char* value);
  void add_tags(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& tags() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_tags();
  private:
  const std::string& _internal_tags(int index) const;
  std::string* _internal_add_tags();
  public:

  // string name = 1;
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // string path = 2;
  void clear_path();
  const std::string& path() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_path(ArgT0&& arg0, ArgT... args);
  std::string* mutable_path();
  PROTOBUF_NODISCARD std::string* release_path();
  void set_allocated_path(std::string* path);
  private:
  const std::string& _internal_path() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_path(const std::string& value);
  std::string* _internal_mutable_path();
  public:

  // string owner = 8;
  void clear_owner();
  const std::string& owner() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_owner(ArgT0&& arg0, ArgT... args);
  std::string* mutable_owner();
  PROTOBUF_NODISCARD std::string* release_owner();
  void set_allocated_owner(std::string* owner);
  private:
  const std::string& _internal_owner() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_owner(const std::string& value);
  std::string* _internal_mutable_owner();
  public:

  // string group = 9;
  void clear_group();
  const std::string& group() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_group(ArgT0&& arg0, ArgT... args);
  std::string* mutable_group();
  PROTOBUF_NODISCARD std::string* release_group();
  void set_allocated_group(std::string* group);
  private:
  const std::string& _internal_group() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_group(const std::string& value);
  std::string* _internal_mutable_group();
  public:

  // uint64 size = 3;
  void clear_size();
  uint64_t size() const;
  void set_size(uint64_t value);
  private:
  uint64_t _internal_size() const;
  void _internal_set_size(uint64_t value);
  public:

  // uint64 created_at = 4;
  void clear_created_at();
  uint64_t created_at() const;
  void set_created_at(uint64_t value);
  private:
  uint64_t _internal_created_at() const;
  void _internal_set_created_at(uint64_t value);
  public:

  // uint64 last_modified = 5;
  void clear_last_modified();
  uint64_t last_modified() const;
  void set_last_modified(uint64_t value);
  private:
  uint64_t _internal_last_modified() const;
  void _internal_set_last_modified(uint64_t value);
  public:

  // uint32 permissions = 7;
  void clear_permissions();
  uint32_t permissions() const;
  void set_permissions(uint32_t value);
  private:
  uint32_t _internal_permissions() const;
  void _internal_set_permissions(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:benchmark.proto.FileMetadataProto)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> tags_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr path_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr owner_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr group_;
    uint64_t size_;
    uint64_t created_at_;
    uint64_t last_modified_;
    uint32_t permissions_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_schemas_2fprotobuf_2ffile_5fstorage_2eproto;
};
// -------------------------------------------------------------------

class FileBlockProto final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:benchmark.proto.FileBlockProto) */ {
 public:
  inline FileBlockProto() : FileBlockProto(nullptr) {}
  ~FileBlockProto() override;
  explicit PROTOBUF_CONSTEXPR FileBlockProto(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  FileBlockProto(const FileBlockProto& from);
  FileBlockProto(FileBlockProto&& from) noexcept
    : FileBlockProto() {
    *this = ::std::move(from);
  }

  inline FileBlockProto& operator=(const FileBlockProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline FileBlockProto& operator=(FileBlockProto&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const FileBlockProto& default_instance() {
    return *internal_default_instance();
  }
  static inline const FileBlockProto* internal_default_instance() {
    return reinterpret_cast<const FileBlockProto*>(
               &_FileBlockProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(FileBlockProto& a, FileBlockProto& b) {
    a.Swap(&b);
  }
  inline void Swap(FileBlockProto* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FileBlockProto* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  FileBlockProto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<FileBlockProto>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const FileBlockProto& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const FileBlockProto& from) {
    FileBlockProto::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FileBlockProto* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "benchmark.proto.FileBlockProto";
  }
  protected:
  explicit FileBlockProto(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBlockIdFieldNumber = 1,
    kDataFieldNumber = 3,
    kOffsetFieldNumber = 2,
    kChecksumFieldNumber = 4,
  };
  // string block_id = 1;
  void clear_block_id();
  const std::string& block_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_block_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_block_id();
  PROTOBUF_NODISCARD std::string* release_block_id();
  void set_allocated_block_id(std::string* block_id);
  private:
  const std::string& _internal_block_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_block_id(const std::string& value);
  std::string* _internal_mutable_block_id();
  public:

  // bytes data = 3;
  void clear_data();
  const std::string& data() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_data(ArgT0&& arg0, ArgT... args);
  std::string* mutable_data();
  PROTOBUF_NODISCARD std::string* release_data();
  void set_allocated_data(std::string* data);
  private:
  const std::string& _internal_data() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_data(const std::string& value);
  std::string* _internal_mutable_data();
  public:

  // uint64 offset = 2;
  void clear_offset();
  uint64_t offset() const;
  void set_offset(uint64_t value);
  private:
  uint64_t _internal_offset() const;
  void _internal_set_offset(uint64_t value);
  public:

  // uint32 checksum = 4;
  void clear_checksum();
  uint32_t checksum() const;
  void set_checksum(uint32_t value);
  private:
  uint32_t _internal_checksum() const;
  void _internal_set_checksum(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:benchmark.proto.FileBlockProto)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr block_id_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr data_;
    uint64_t offset_;
    uint32_t checksum_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_schemas_2fprotobuf_2ffile_5fstorage_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// FileMetadataProto

// string name = 1;
inline void FileMetadataProto::clear_name() {
  _impl_.name_.ClearToEmpty();
}
inline const std::string& FileMetadataProto::name() const {
  // @@protoc_insertion_point(field_get:benchmark.proto.FileMetadataProto.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void FileMetadataProto::set_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:benchmark.proto.FileMetadataProto.name)
}
inline std::string* FileMetadataProto::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:benchmark.proto.FileMetadataProto.name)
  return _s;
}
inline const std::string& FileMetadataProto::_internal_name() const {
  return _impl_.name_.Get();
}
inline void FileMetadataProto::_internal_set_name(const std::string& value) {
  
  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* FileMetadataProto::_internal_mutable_name() {
  
  return _impl_.name_.Mutable(GetArenaForAllocation());
}
inline std::string* FileMetadataProto::release_name() {
  // @@protoc_insertion_point(field_release:benchmark.proto.FileMetadataProto.name)
  return _impl_.name_.Release();
}
inline void FileMetadataProto::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  _impl_.name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:benchmark.proto.FileMetadataProto.name)
}

// string path = 2;
inline void FileMetadataProto::clear_path() {
  _impl_.path_.ClearToEmpty();
}
inline const std::string& FileMetadataProto::path() const {
  // @@protoc_insertion_point(field_get:benchmark.proto.FileMetadataProto.path)
  return _internal_path();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void FileMetadataProto::set_path(ArgT0&& arg0, ArgT... args) {
 
 _impl_.path_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:benchmark.proto.FileMetadataProto.path)
}
inline std::string* FileMetadataProto::mutable_path() {
  std::string* _s = _internal_mutable_path();
  // @@protoc_insertion_point(field_mutable:benchmark.proto.FileMetadataProto.path)
  return _s;
}
inline const std::string& FileMetadataProto::_internal_path() const {
  return _impl_.path_.Get();
}
inline void FileMetadataProto::_internal_set_path(const std::string& value) {
  
  _impl_.path_.Set(value, GetArenaForAllocation());
}
inline std::string* FileMetadataProto::_internal_mutable_path() {
  
  return _impl_.path_.Mutable(GetArenaForAllocation());
}
inline std::string* FileMetadataProto::release_path() {
  // @@protoc_insertion_point(field_release:benchmark.proto.FileMetadataProto.path)
  return _impl_.path_.Release();
}
inline void FileMetadataProto::set_allocated_path(std::string* path) {
  if (path != nullptr) {
    
  } else {
    
  }
  _impl_.path_.SetAllocated(path, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.path_.IsDefault()) {
    _impl_.path_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:benchmark.proto.FileMetadataProto.path)
}

// uint64 size = 3;
inline void FileMetadataProto::clear_size() {
  _impl_.size_ = uint64_t{0u};
}
inline uint64_t FileMetadataProto::_internal_size() const {
  return _impl_.size_;
}
inline uint64_t FileMetadataProto::size() const {
  // @@protoc_insertion_point(field_get:benchmark.proto.FileMetadataProto.size)
  return _internal_size();
}
inline void FileMetadataProto::_internal_set_size(uint64_t value) {
  
  _impl_.size_ = value;
}
inline void FileMetadataProto::set_size(uint64_t value) {
  _internal_set_size(value);
  // @@protoc_insertion_point(field_set:benchmark.proto.FileMetadataProto.size)
}

// uint64 created_at = 4;
inline void FileMetadataProto::clear_created_at() {
  _impl_.created_at_ = uint64_t{0u};
}
inline uint64_t FileMetadataProto::_internal_created_at() const {
  return _impl_.created_at_;
}
inline uint64_t FileMetadataProto::created_at() const {
  // @@protoc_insertion_point(field_get:benchmark.proto.FileMetadataProto.created_at)
  return _internal_created_at();
}
inline void FileMetadataProto::_internal_set_created_at(uint64_t value) {
  
  _impl_.created_at_ = value;
}
inline void FileMetadataProto::set_created_at(uint64_t value) {
  _internal_set_created_at(value);
  // @@protoc_insertion_point(field_set:benchmark.proto.FileMetadataProto.created_at)
}

// uint64 last_modified = 5;
inline void FileMetadataProto::clear_last_modified() {
  _impl_.last_modified_ = uint64_t{0u};
}
inline uint64_t FileMetadataProto::_internal_last_modified() const {
  return _impl_.last_modified_;
}
inline uint64_t FileMetadataProto::last_modified() const {
  // @@protoc_insertion_point(field_get:benchmark.proto.FileMetadataProto.last_modified)
  return _internal_last_modified();
}
inline void FileMetadataProto::_internal_set_last_modified(uint64_t value) {
  
  _impl_.last_modified_ = value;
}
inline void FileMetadataProto::set_last_modified(uint64_t value) {
  _internal_set_last_modified(value);
  // @@protoc_insertion_point(field_set:benchmark.proto.FileMetadataProto.last_modified)
}

// repeated string tags = 6;
inline int FileMetadataProto::_internal_tags_size() const {
  return _impl_.tags_.size();
}
inline int FileMetadataProto::tags_size() const {
  return _internal_tags_size();
}
inline void FileMetadataProto::clear_tags() {
  _impl_.tags_.Clear();
}
inline std::string* FileMetadataProto::add_tags() {
  std::string* _s = _internal_add_tags();
  // @@protoc_insertion_point(field_add_mutable:benchmark.proto.FileMetadataProto.tags)
  return _s;
}
inline const std::string& FileMetadataProto::_internal_tags(int index) const {
  return _impl_.tags_.Get(index);
}
inline const std::string& FileMetadataProto::tags(int index) const {
  // @@protoc_insertion_point(field_get:benchmark.proto.FileMetadataProto.tags)
  return _internal_tags(index);
}
inline std::string* FileMetadataProto::mutable_tags(int index) {
  // @@protoc_insertion_point(field_mutable:benchmark.proto.FileMetadataProto.tags)
  return _impl_.tags_.Mutable(index);
}
inline void FileMetadataProto::set_tags(int index, const std::string& value) {
  _impl_.tags_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:benchmark.proto.FileMetadataProto.tags)
}
inline void FileMetadataProto::set_tags(int index, std::string&& value) {
  _impl_.tags_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:benchmark.proto.FileMetadataProto.tags)
}
inline void FileMetadataProto::set_tags(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.tags_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:benchmark.proto.FileMetadataProto.tags)
}
inline void FileMetadataProto::set_tags(int index, const char* value, size_t size) {
  _impl_.tags_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:benchmark.proto.FileMetadataProto.tags)
}
inline std::string* FileMetadataProto::_internal_add_tags() {
  return _impl_.tags_.Add();
}
inline void FileMetadataProto::add_tags(const std::string& value) {
  _impl_.tags_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:benchmark.proto.FileMetadataProto.tags)
}
inline void FileMetadataProto::add_tags(std::string&& value) {
  _impl_.tags_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:benchmark.proto.FileMetadataProto.tags)
}
inline void FileMetadataProto::add_tags(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.tags_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:benchmark.proto.FileMetadataProto.tags)
}
inline void FileMetadataProto::add_tags(const char* value, size_t size) {
  _impl_.tags_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:benchmark.proto.FileMetadataProto.tags)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
FileMetadataProto::tags() const {
  // @@protoc_insertion_point(field_list:benchmark.proto.FileMetadataProto.tags)
  return _impl_.tags_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
FileMetadataProto::mutable_tags() {
  // @@protoc_insertion_point(field_mutable_list:benchmark.proto.FileMetadataProto.tags)
  return &_impl_.tags_;
}

// uint32 permissions = 7;
inline void FileMetadataProto::clear_permissions() {
  _impl_.permissions_ = 0u;
}
inline uint32_t FileMetadataProto::_internal_permissions() const {
  return _impl_.permissions_;
}
inline uint32_t FileMetadataProto::permissions() const {
  // @@protoc_insertion_point(field_get:benchmark.proto.FileMetadataProto.permissions)
  return _internal_permissions();
}
inline void FileMetadataProto::_internal_set_permissions(uint32_t value) {
  
  _impl_.permissions_ = value;
}
inline void FileMetadataProto::set_permissions(uint32_t value) {
  _internal_set_permissions(value);
  // @@protoc_insertion_point(field_set:benchmark.proto.FileMetadataProto.permissions)
}

// string owner = 8;
inline void FileMetadataProto::clear_owner() {
  _impl_.owner_.ClearToEmpty();
}
inline const std::string& FileMetadataProto::owner() const {
  // @@protoc_insertion_point(field_get:benchmark.proto.FileMetadataProto.owner)
  return _internal_owner();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void FileMetadataProto::set_owner(ArgT0&& arg0, ArgT... args) {
 
 _impl_.owner_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:benchmark.proto.FileMetadataProto.owner)
}
inline std::string* FileMetadataProto::mutable_owner() {
  std::string* _s = _internal_mutable_owner();
  // @@protoc_insertion_point(field_mutable:benchmark.proto.FileMetadataProto.owner)
  return _s;
}
inline const std::string& FileMetadataProto::_internal_owner() const {
  return _impl_.owner_.Get();
}
inline void FileMetadataProto::_internal_set_owner(const std::string& value) {
  
  _impl_.owner_.Set(value, GetArenaForAllocation());
}
inline std::string* FileMetadataProto::_internal_mutable_owner() {
  
  return _impl_.owner_.Mutable(GetArenaForAllocation());
}
inline std::string* FileMetadataProto::release_owner() {
  // @@protoc_insertion_point(field_release:benchmark.proto.FileMetadataProto.owner)
  return _impl_.owner_.Release();
}
inline void FileMetadataProto::set_allocated_owner(std::string* owner) {
  if (owner != nullptr) {
    
  } else {
    
  }
  _impl_.owner_.SetAllocated(owner, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.owner_.IsDefault()) {
    _impl_.owner_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:benchmark.proto.FileMetadataProto.owner)
}

// string group = 9;
inline void FileMetadataProto::clear_group() {
  _impl_.group_.ClearToEmpty();
}
inline const std::string& FileMetadataProto::group() const {
  // @@protoc_insertion_point(field_get:benchmark.proto.FileMetadataProto.group)
  return _internal_group();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void FileMetadataProto::set_group(ArgT0&& arg0, ArgT... args) {
 
 _impl_.group_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:benchmark.proto.FileMetadataProto.group)
}
inline std::string* FileMetadataProto::mutable_group() {
  std::string* _s = _internal_mutable_group();
  // @@protoc_insertion_point(field_mutable:benchmark.proto.FileMetadataProto.group)
  return _s;
}
inline const std::string& FileMetadataProto::_internal_group() const {
  return _impl_.group_.Get();
}
inline void FileMetadataProto::_internal_set_group(const std::string& value) {
  
  _impl_.group_.Set(value, GetArenaForAllocation());
}
inline std::string* FileMetadataProto::_internal_mutable_group() {
  
  return _impl_.group_.Mutable(GetArenaForAllocation());
}
inline std::string* FileMetadataProto::release_group() {
  // @@protoc_insertion_point(field_release:benchmark.proto.FileMetadataProto.group)
  return _impl_.group_.Release();
}
inline void FileMetadataProto::set_allocated_group(std::string* group) {
  if (group != nullptr) {
    
  } else {
    
  }
  _impl_.group_.SetAllocated(group, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.group_.IsDefault()) {
    _impl_.group_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:benchmark.proto.FileMetadataProto.group)
}

// -------------------------------------------------------------------

// FileBlockProto

// string block_id = 1;
inline void FileBlockProto::clear_block_id() {
  _impl_.block_id_.ClearToEmpty();
}
inline const std::string& FileBlockProto::block_id() const {
  // @@protoc_insertion_point(field_get:benchmark.proto.FileBlockProto.block_id)
  return _internal_block_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void FileBlockProto::set_block_id(ArgT0&& arg0, ArgT... args) {
 
 _impl_.block_id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:benchmark.proto.FileBlockProto.block_id)
}
inline std::string* FileBlockProto::mutable_block_id() {
  std::string* _s = _internal_mutable_block_id();
  // @@protoc_insertion_point(field_mutable:benchmark.proto.FileBlockProto.block_id)
  return _s;
}
inline const std::string& FileBlockProto::_internal_block_id() const {
  return _impl_.block_id_.Get();
}
inline void FileBlockProto::_internal_set_block_id(const std::string& value) {
  
  _impl_.block_id_.Set(value, GetArenaForAllocation());
}
inline std::string* FileBlockProto::_internal_mutable_block_id() {
  
  return _impl_.block_id_.Mutable(GetArenaForAllocation());
}
inline std::string* FileBlockProto::release_block_id() {
  // @@protoc_insertion_point(field_release:benchmark.proto.FileBlockProto.block_id)
  return _impl_.block_id_.Release();
}
inline void FileBlockProto::set_allocated_block_id(std::string* block_id) {
  if (block_id != nullptr) {
    
  } else {
    
  }
  _impl_.block_id_.SetAllocated(block_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.block_id_.IsDefault()) {
    _impl_.block_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:benchmark.proto.FileBlockProto.block_id)
}

// uint64 offset = 2;
inline void FileBlockProto::clear_offset() {
  _impl_.offset_ = uint64_t{0u};
}
inline uint64_t FileBlockProto::_internal_offset() const {
  return _impl_.offset_;
}
inline uint64_t FileBlockProto::offset() const {
  // @@protoc_insertion_point(field_get:benchmark.proto.FileBlockProto.offset)
  return _internal_offset();
}
inline void FileBlockProto::_internal_set_offset(uint64_t value) {
  
  _impl_.offset_ = value;
}
inline void FileBlockProto::set_offset(uint64_t value) {
  _internal_set_offset(value);
  // @@protoc_insertion_point(field_set:benchmark.proto.FileBlockProto.offset)
}

// bytes data = 3;
inline void FileBlockProto::clear_data() {
  _impl_.data_.ClearToEmpty();
}
inline const std::string& FileBlockProto::data() const {
  // @@protoc_insertion_point(field_get:benchmark.proto.FileBlockProto.data)
  return _internal_data();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void FileBlockProto::set_data(ArgT0&& arg0, ArgT... args) {
 
 _impl_.data_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:benchmark.proto.FileBlockProto.data)
}
inline std::string* FileBlockProto::mutable_data() {
  std::string* _s = _internal_mutable_data();
  // @@protoc_insertion_point(field_mutable:benchmark.proto.FileBlockProto.data)
  return _s;
}
inline const std::string& FileBlockProto::_internal_data() const {
  return _impl_.data_.Get();
}
inline void FileBlockProto::_internal_set_data(const std::string& value) {
  
  _impl_.data_.Set(value, GetArenaForAllocation());
}
inline std::string* FileBlockProto::_internal_mutable_data() {
  
  return _impl_.data_.Mutable(GetArenaForAllocation());
}
inline std::string* FileBlockProto::release_data() {
  // @@protoc_insertion_point(field_release:benchmark.proto.FileBlockProto.data)
  return _impl_.data_.Release();
}
inline void FileBlockProto::set_allocated_data(std::string* data) {
  if (data != nullptr) {
    
  } else {
    
  }
  _impl_.data_.SetAllocated(data, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.data_.IsDefault()) {
    _impl_.data_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:benchmark.proto.FileBlockProto.data)
}

// uint32 checksum = 4;
inline void FileBlockProto::clear_checksum() {
  _impl_.checksum_ = 0u;
}
inline uint32_t FileBlockProto::_internal_checksum() const {
  return _impl_.checksum_;
}
inline uint32_t FileBlockProto::checksum() const {
  // @@protoc_insertion_point(field_get:benchmark.proto.FileBlockProto.checksum)
  return _internal_checksum();
}
inline void FileBlockProto::_internal_set_checksum(uint32_t value) {
  
  _impl_.checksum_ = value;
}
inline void FileBlockProto::set_checksum(uint32_t value) {
  _internal_set_checksum(value);
  // @@protoc_insertion_point(field_set:benchmark.proto.FileBlockProto.checksum)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto
}  // namespace benchmark

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_schemas_2fprotobuf_2ffile_5fstorage_2eproto
